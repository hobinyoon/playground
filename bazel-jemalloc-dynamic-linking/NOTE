Dynamic linking to jemalloc

Verify the dependency to libjemalloc_core.so
❯ ldd bazel-bin/main
        linux-vdso.so.1 (0x00007ffd29e94000)
        libST-82e065b31b46_external_Sjemalloc+_Slibjemalloc_Ucore.so => /home/hyoon/code/hobinyoon/playground/bazel-jemalloc-dynamic-linking/bazel-bin/main.runfiles/_main/_solib_k8/libST-82e065b31b46_external_Sjemalloc+_Slibjemalloc_Ucore.so (0x00007fb447755000)
        libdl.so.2 => /lib/x86_64-linux-gnu/libdl.so.2 (0x00007fb447551000)
        libpthread.so.0 => /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007fb447332000)
        librt.so.1 => /lib/x86_64-linux-gnu/librt.so.1 (0x00007fb44712a000)
        libstdc++.so.6 => /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007fb446cca000)
        libc.so.6 => /lib/x86_64-linux-gnu/libc.so.6 (0x00007fb4468d9000)
        libgcc_s.so.1 => /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007fb4466b6000)
        /lib64/ld-linux-x86-64.so.2 (0x00007fb447c22000)
        libm.so.6 => /lib/x86_64-linux-gnu/libm.so.6 (0x00007fb446318000)

Verify which new, between glibc and jemalloc, is called using gdb
$ bazel build --copt="-g" //:main
$ gdb bazel-bin/main
(gdb) b _Znwm
(gdb) b je_operator_new
(gdb) r
Breakpoint 1, 0x00007ffff7d7d591 in operator new(unsigned long) ()
  from /home/hyoon/.cache/bazel/_bazel_hyoon/40703bdbecb58f57029de7d424c32e82/execroot/_main/bazel-out/k8-fastbuild/bin/main.runfiles/_main/_solib_k8/libST-82e065b31b46_external_Sjemalloc+_Slibjemalloc_Ucore.so

Misc
  _Znwm is a mangled symbol name for new[]

We didn't use LD_PRELOAD, but jemalloc new was loaded. Because we had a full control of the build system - we specified the dependency.
However, to run a pre-built binary with jemalloc, we need to specify LD_PRELOAD.

$ bazel run //:main

References:
* Gemini
* https://abseil.io/docs/cpp/quickstart.html
